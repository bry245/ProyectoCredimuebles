@{
	ViewData["Title"] = "AgregarProducto";
	Layout = "~/Views/Shared/_Layout.cshtml";
}



<<div class="container">
	<div class="card shadow-2-strong mb-5 mb-lg-0" style="border-radius: 16px;">
		<div class="card-body p-4">
			<div class="form-outline mb-5 mb-xl-4">
				<h2>Agregar Proveedor</h2>
			</div>
			<div class="row">
				<div class="col-lg-8 col-xl-6">
					<div class="form-outline mb-5 mb-xl-4">
						<input type="text" id="nombre" name="nombre" class="form-control form-control-lg" placeholder="Nombre" requeried />
					</div>
					<div class="form-outline mb-5 mb-xl-4">
						<input type="text" id="telefono" name="telefono" class="form-control form-control-lg" requeried placeholder="Telefono" />
					</div>

				</div>

				<div class="col-lg-8 col-xl-6">
					<div class="form-outline mb-5 mb-xl-4">
						<input type="email" id="correo" name="correo" class="form-control form-control-lg" requeried placeholder="Correo Electronico" />
					</div>
					<div class="form-outline mb-5 mb-xl-4">
						<input type="text" id="direccion" name="direccion" class="form-control form-control-lg" requeried placeholder="Direccion" />
					</div>



				</div>

				<button @* href="@Url.Action("AgregarProducto","Inventario")" *@ class="btn" type="button" id="guardar"> <i class="">Registrar Proveedor</i>  </button>
			</div>
		</div>
	</div>
</div>






<script>
	document.getElementById('guardar').addEventListener('click', async () => {
		// Obtener los valores de los campos
		const nombre = document.getElementById('nombre').value.trim();
		const telefono = document.getElementById('telefono').value.trim();
		const correo = document.getElementById('correo').value.trim();
		const direccion = document.getElementById('direccion').value.trim();

		// Verificar que todos los campos tienen datos
		if (!nombre || !telefono || !correo || !direccion) {
			Swal.fire({
				icon: 'error',
				title: 'Error',
				text: 'Por favor complete todos los campos.'
			});
			return; // Salir de la función si algún campo está vacío
		}

		// Crear el objeto de datos
		const data = {
			nombre,
			telefono,
			correo,
			direccion
		};

		try {
			// Realizar la llamada fetch
			const response = await fetch('@Url.Action("GuardarProveedor", "Proveedor")', {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json'
				},
				body: JSON.stringify(data)
			});

			// Verificar el estado de la respuesta
			if (response.ok) {
				Swal.fire({
					icon: 'success',
					title: 'Proveedor Agregado',
					text: 'El proveedor ha sido actualizado correctamente.'
				}).then(() => {
					window.location.href = '@Url.Action("ListadoProveedor", "Proveedor")';
				});
			} else {
				// Mostrar mensaje de error si la respuesta no es exitosa
				Swal.fire({
					icon: 'error',
					title: 'Error',
					text: 'Hubo un problema al actualizar el proveedor.'
				});
			}
		} catch (error) {
			// Mostrar mensaje de error si hay un problema con la llamada fetch
			Swal.fire({
				icon: 'error',
				title: 'Error',
				text: 'Hubo un problema al actualizar el proveedor.'
			});
		}
	});
</script>